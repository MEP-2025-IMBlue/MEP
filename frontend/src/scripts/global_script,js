// global_script.js

function getCurrentLang() {
  return localStorage.getItem("lang") || "de";
}

const translations = {
  de: {
    container_title: "Wie möchten Sie Ihren Container bereitstellen?",
    upload_local: "Lokal hochladen",
    upload_local_desc: "Datei direkt vom Computer auswählen und hochladen.",
    upload_hub: "Docker Hub Referenz",
    upload_hub_desc: "Einfach Image Name:Tag eingeben, z. B. nginx:latest.",
    upload_btn: "Hochladen",
    referenzieren_btn: "Referenzieren",
    drag_drop_local: "\u{1F4C1} Container (.tar) hierher ziehen oder klicken",
    image_placeholder: "Image Name:Tag (z. B. nginx:latest)",
    dashboard_title: "KI-Images",
    dashboard_info: "Hier erscheinen alle hochgeladenen KI-Images.",
    filter_placeholder: "\u{1F50E} Suchbegriff eingeben...",
    dicom_title: "DICOM-Datei hochladen",
    dicom_drag_drop: "\u{1F4C1} DICOM-Datei hierher ziehen oder klicken",
    ai_response: "Antwort der KI",
    error_file_invalid: "\u{1F4C4} Ungültiges Dateiformat. Bitte laden Sie eine `.tar`-Datei hoch.",
    error_format: "\u{1F4C4} Ungültiges Format. Bitte geben Sie z. B. ein Image im Format `nginx:latest` ein.",
    error_required: "\u{1F4C4} Bitte füllen Sie alle Pflichtfelder aus.",
    error_exists: "\u{1F4C4} Dieses Image wurde bereits hochgeladen.",
    error_not_found: "\u{1F4C4} Das angegebene Image konnte nicht gefunden werden.",
    error_unknown: "\u{1F4C4} Ein unbekannter Fehler ist aufgetreten.",
    error_upload: "\u{1F4C4} Upload fehlgeschlagen (Verbindungsfehler)",
    status_uploading: "\u23F3 Upload gestartet...",
    status_upload_done: "\u2705 Upload erfolgreich!"
  },
  en: {
    container_title: "How would you like to provide your container?",
    upload_local: "Upload locally",
    upload_local_desc: "Select and upload file from your computer.",
    upload_hub: "Docker Hub Reference",
    upload_hub_desc: "Just enter image name:tag, e.g. nginx:latest.",
    upload_btn: "Upload",
    referenzieren_btn: "Reference",
    drag_drop_local: "\u{1F4C1} Drag & drop a .tar container here or click",
    image_placeholder: "Image name:tag (e.g. nginx:latest)",
    dashboard_title: "AI Images",
    dashboard_info: "All uploaded AI containers are listed here.",
    filter_placeholder: "\u{1F50E} Enter search term...",
    dicom_title: "Upload DICOM file",
    dicom_drag_drop: "\u{1F4C1} Drag & drop a DICOM file here or click",
    ai_response: "AI Response",
    error_file_invalid: "\u{1F4C4} Invalid file format. Please upload a `.tar` file.",
    error_format: "\u{1F4C4} Invalid format. Please enter image in format `nginx:latest`.",
    error_required: "\u{1F4C4} Please fill out all required fields.",
    error_exists: "\u{1F4C4} This image has already been uploaded.",
    error_not_found: "\u{1F4C4} The specified image could not be found.",
    error_unknown: "\u{1F4C4} An unknown error occurred.",
    error_upload: "\u{1F4C4} Upload failed (connection error)",
    status_uploading: "\u23F3 Upload started...",
    status_upload_done: "\u2705 Upload successful!"
  }
};

function applyTranslations(lang) {
  const t = translations[lang];

  // Container Upload
  if (location.pathname.includes("container_upload")) {
    document.querySelector(".section-title")?.textContent = t.container_title;
    document.querySelectorAll(".upload-card")[0]?.querySelector("h3").textContent = t.upload_local;
    document.querySelectorAll(".upload-card")[0]?.querySelector("p").textContent = t.upload_local_desc;
    document.querySelectorAll(".upload-card")[1]?.querySelector("h3").textContent = t.upload_hub;
    document.querySelectorAll(".upload-card")[1]?.querySelector("p").textContent = t.upload_hub_desc;
    document.querySelector("#drop-local span")?.textContent = t.drag_drop_local;
    document.querySelector("#local-upload-form button")?.textContent = t.upload_btn;
    document.querySelector("#hub-upload-form button")?.textContent = t.referenzieren_btn;
    document.querySelector("#hub-upload-form input")?.placeholder = t.image_placeholder;
  }

  // Dashboard
  if (location.pathname.includes("dashboard")) {
    document.querySelector("h1.section-title")?.textContent = t.dashboard_title;
    document.querySelector("#ki-image-list p")?.textContent = t.dashboard_info;
    document.querySelector("#searchInput")?.placeholder = t.filter_placeholder;
  }

  // DICOM Upload
  if (location.pathname.includes("dicom_upload")) {
    document.querySelector("h1.section-title")?.textContent = t.dicom_title;
    document.querySelector("#dicom-drop-text")?.textContent = t.dicom_drag_drop;
    document.querySelector("#ai-result h2")?.textContent = t.ai_response;
  }
}

function interpretErrorMessage(rawMsg, source = "") {
  const t = translations[getCurrentLang()];
  if (!rawMsg) return t.error_unknown;

  const msg = rawMsg.toLowerCase();

  if (source === "local" && msg.includes("file") && msg.includes("invalid")) return t.error_file_invalid;
  if (source === "hub" && (msg.includes("invalid") || msg.includes("format"))) return t.error_format;
  if (msg.includes("missing") || msg.includes("required")) return t.error_required;
  if (msg.includes("already exists")) return t.error_exists;
  if (msg.includes("not found")) return t.error_not_found;

  return `${t.error_unknown} (${rawMsg})`;
}
window.applyTranslations = applyTranslations;
