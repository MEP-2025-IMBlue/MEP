services:

  imblue-db:
    image: postgres:16
    container_name: imblue-db
    restart: always
    env_file:
      - ./database/.env
    volumes:
      - imblue_data:/var/lib/postgresql/data
      - ./database/schemas/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imblue_user -d imblue_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mep-network

  kc_imblue-db:
    image: postgres:16
    container_name: kc_imblue-db
    restart: always
    env_file:
      - ./keycloak/.env
    volumes:
      - kc_imblue_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kc_imblue_user -d kc_imblue_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mep-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.4
    container_name: mep-keycloak
    command: start-dev --import-realm
    env_file:
      - ./keycloak/.env
    depends_on:
      kc_imblue-db:
        condition: service_healthy
    ports:
      - "8090:8080"
    volumes:
      - ./keycloak/keycloak-export:/opt/keycloak/data/import
    networks:
      - mep-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mep-backend
    depends_on:
      imblue-db:
        condition: service_healthy
      keycloak:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./storage/uploads:/tmp/uploads
      - ./storage/processed:/tmp/processed
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/app/src
    networks:
      - mep-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mep-frontend
    depends_on:
      keycloak:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - mep-network

volumes:
  imblue_data:
  kc_imblue_data:

networks:
  mep-network:
    driver: bridge
