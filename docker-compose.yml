services:
  imblue-db:
    image: postgres:16
    container_name: imblue-db
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./database/.env
    volumes:
      # Speichert die PostgreSQL-Daten persistent außerhalb des Containers → Daten bleiben erhalten, auch wenn der Container neu gestartet oder gelöscht wird
      - imblue_data:/var/lib/postgresql/data
      # Führt einmalig beim allerersten Start das SQL-Initialisierungsskript aus (nicht mehr bei späteren Starts, wenn Daten schon da sind)
      - ./database/schemas/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imblue_user -d imblue_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mep-network

  kc_imblue-db:
    image: postgres:16
    container_name: kc_imblue-db
    restart: always
    env_file:
      - ./keycloak/.env
    volumes:
      - kc_imblue_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kc_imblue_user -d kc_imblue_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mep-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.4
    container_name: mep-keycloak
    command: start-dev --import-realm
    env_file:
      - ./keycloak/.env
    depends_on:
      kc_imblue-db:
        condition: service_healthy
    ports:
      - "8090:8080"
    volumes:
      # Importiert beim ersten Start automatisch die Realm-Konfiguration
      - ./keycloak/keycloak-export:/opt/keycloak/data/import
    networks:
      - mep-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mep-backend
    depends_on:
      imblue-db:
        condition: service_healthy
      keycloak:
        condition: service_started
    ports:
      - "8001:8000" # Uvicorn HTTP (FastAPI) → Außenwelt-Zugriff + Prometheus /metrics
    volumes:
      # Mountet Backend-Quellcode und relevante Verzeichnisse ins Container-Dateisystem
      - ./backend:/app                         # Quellcode ins Container-Dateisystem mounten
      - ./storage/uploads:/tmp/uploads         # Uploads persistieren
      - ./storage/processed:/tmp/processed     # Verarbeitete Dateien persistieren
      - ./storage/logs:/tmp/logs               # Logs persistieren
      # Ermöglicht dem Backend den Zugriff auf Docker-Events (für Container-Management)
      - /var/run/docker.sock:/var/run/docker.sock # Für Containerverwaltung von innen
      - ./backend/logs:/app/logs
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/app/src                 # Damit src/... korrekt erkannt wird
      - LOG_DIR=/app/logs 
    # Healthcheck: Prüft, ob FastAPI erreichbar ist (root endpoint `/`)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

    networks:
      - mep-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mep-frontend
    depends_on:
      keycloak:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - mep-network

  loki:
    image: grafana/loki:2.9.6
    container_name: mep-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - ./storage/loki/index:/loki/index
      - ./storage/loki/cache:/loki/cache
      - ./storage/loki/chunks:/loki/chunks
      - ./storage/loki/wal:/wal 
      - ./storage/loki/compactor:/loki/compactor
    networks:
      - mep-network
  
  promtail:
    image: grafana/promtail:2.9.6
    container_name: mep-promtail
    depends_on:
      - loki
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro    
      - ./backend/logs:/app/logs                                   
      - ./test.log:/var/log/test.log
      - /etc/machine-id:/etc/machine-id:ro
    command: -config.file=/etc/promtail/promtail-config.yaml -log.level=debug
    networks:
      - mep-network


  grafana:
    image: grafana/grafana:10.4.2
    container_name: mep-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      # Automatische Datenquellen-Provisionierung
      - ./config/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - loki
    networks:
      - mep-network
  prometheus:
    image: prom/prometheus:latest
    container_name: mep-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml  
    networks:
      - mep-network
      
volumes:
  imblue_data:
  kc_imblue_data:

networks:
  mep-network:
    driver: bridge